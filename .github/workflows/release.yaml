# GitHub Workflows file

name: release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  mkrelease:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  buildpkg:
    name: Build and Upload Release Asset
    runs-on: ${{ matrix.os }}

    needs: mkrelease

    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            mkcmd: ./tools/mkdeb.sh
          - build: macos
            os: macos-latest
            mkcmd: ./tools/mkpkg.sh
          - build: windows
            os: windows-latest
            mkcmd: ./tools/mkzip.ps1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Install Linux dependency
        run: sudo apt-get install libkrb5-dev
        if: ${{ matrix.build == 'linux' }}
      #  see https://github.com/rust-lang/rust-bindgen/issues/1797
      - name: Install Windows dependency (LLVM)
        uses: KyleMayes/install-llvm-action@v1.5.2
        if: ${{ matrix.build == 'windows' }}
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: ${{ matrix.build == 'windows' }}
      - name: Build Release Package
        id: buildpkg
        run: ${{ matrix.mkcmd }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.mkrelease.outputs.upload_url }}
          asset_path: ./${{ steps.buildpkg.outputs.pkgfile }}
          asset_name: ${{ steps.buildpkg.outputs.pkgfile }}
          asset_content_type: application/octet-stream
